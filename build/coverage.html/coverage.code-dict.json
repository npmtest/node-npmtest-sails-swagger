{"/home/travis/build/npmtest/node-npmtest-sails-swagger/test.js":"/* istanbul instrument in package npmtest_sails_swagger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/lib.npmtest_sails_swagger.js":"/* istanbul instrument in package npmtest_sails_swagger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sails_swagger = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sails_swagger = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sails-swagger && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sails_swagger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sails_swagger\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sails_swagger.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sails_swagger.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sails_swagger.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sails_swagger.__dirname + '/lib.npmtest_sails_swagger.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/dist/api/hooks/swagger/index.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _marlinspike = require('marlinspike');\n\nvar _marlinspike2 = _interopRequireDefault(_marlinspike);\n\nvar _libXfmr = require('../../../lib/xfmr');\n\nvar _libXfmr2 = _interopRequireDefault(_libXfmr);\n\nvar Swagger = (function (_Marlinspike) {\n  _inherits(Swagger, _Marlinspike);\n\n  function Swagger(sails) {\n    _classCallCheck(this, Swagger);\n\n    _get(Object.getPrototypeOf(Swagger.prototype), 'constructor', this).call(this, sails, module);\n  }\n\n  _createClass(Swagger, [{\n    key: 'initialize',\n    value: function initialize(next) {\n      var _this = this;\n\n      var hook = this.sails.hooks.swagger;\n      this.sails.after('lifted', function () {\n        hook.doc = _libXfmr2['default'].getSwagger(_this.sails, _this.sails.config.swagger.pkg);\n      });\n\n      next();\n    }\n  }]);\n\n  return Swagger;\n})(_marlinspike2['default']);\n\nexports['default'] = _marlinspike2['default'].createSailsHook(Swagger);\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/dist/lib/xfmr.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _hoek = require('hoek');\n\nvar _hoek2 = _interopRequireDefault(_hoek);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _spec = require('./spec');\n\nvar _spec2 = _interopRequireDefault(_spec);\n\nvar methodMap = {\n  post: 'Create Object(s)',\n  get: 'Read Object(s)',\n  put: 'Update Object(s)',\n  patch: 'Update Object(s)',\n  'delete': 'Destroy Object(s)',\n  options: 'Get Resource Options',\n  head: 'Get Resource headers'\n};\n\nvar Transformer = {\n\n  getSwagger: function getSwagger(sails, pkg) {\n    return {\n      swagger: '2.0',\n      info: Transformer.getInfo(pkg),\n      host: sails.config.swagger.host,\n      tags: Transformer.getTags(sails),\n      definitions: Transformer.getDefinitions(sails),\n      paths: Transformer.getPaths(sails)\n    };\n  },\n\n  /**\n   * Convert a package.json file into a Swagger Info Object\n   * http://swagger.io/specification/#infoObject\n   */\n  getInfo: function getInfo(pkg) {\n    return _hoek2['default'].transform(pkg, {\n      'title': 'name',\n      'description': 'description',\n      'version': 'version',\n\n      'contact.name': 'author',\n      'contact.url': 'homepage',\n\n      'license.name': 'license'\n    });\n  },\n\n  /**\n   * http://swagger.io/specification/#tagObject\n   */\n  getTags: function getTags(sails) {\n    return _lodash2['default'].map(_lodash2['default'].pluck(sails.controllers, 'globalId'), function (tagName) {\n      return {\n        name: tagName\n        //description: `${tagName} Controller`\n      };\n    });\n  },\n\n  /**\n   * http://swagger.io/specification/#definitionsObject\n   */\n  getDefinitions: function getDefinitions(sails) {\n    var definitions = _lodash2['default'].transform(sails.models, function (definitions, model, modelName) {\n      definitions[model.identity] = {\n        properties: Transformer.getDefinitionProperties(model.definition)\n      };\n    });\n\n    delete definitions['undefined'];\n\n    return definitions;\n  },\n\n  getDefinitionProperties: function getDefinitionProperties(definition) {\n    return _lodash2['default'].mapValues(definition, function (def, attrName) {\n      var property = _lodash2['default'].pick(def, ['type', 'description', 'format']);\n\n      return _spec2['default'].getPropertyType(property.type);\n    });\n  },\n\n  /**\n   * Convert the internal Sails route map into a Swagger Paths\n   * Object\n   * http://swagger.io/specification/#pathsObject\n   * http://swagger.io/specification/#pathItemObject\n   */\n  getPaths: function getPaths(sails) {\n    var routes = sails.router._privateRouter.routes;\n    var pathGroups = _lodash2['default'].chain(routes).values().flatten().unique(function (route) {\n      return route.path + route.method + JSON.stringify(route.keys);\n    }).reject({ path: '/*' }).reject({ path: '/__getcookie' }).reject({ path: '/csrfToken' }).reject({ path: '/csrftoken' }).groupBy('path').mapKeys(function (_, path) {\n      return path.replace(/:(\\w+)\\??/g, '{$1}');\n    }).value();\n\n    return _lodash2['default'].mapValues(pathGroups, function (pathGroup, key) {\n      return Transformer.getPathItem(sails, pathGroup, key);\n    });\n  },\n\n  getModelFromPath: function getModelFromPath(sails, path) {\n    var split = path.split('/');\n\n    var _path$split = path.split('/');\n\n    var _path$split2 = _slicedToArray(_path$split, 5);\n\n    var $ = _path$split2[0];\n    var parentModelName = _path$split2[1];\n    var parentId = _path$split2[2];\n    var childAttributeName = _path$split2[3];\n    var childId = _path$split2[4];\n\n    var parentModel = sails.models[parentModelName];\n    var childAttribute = _lodash2['default'].get(parentModel, ['attributes', childAttributeName]);\n    var childModelName = _lodash2['default'].get(childAttribute, 'collection') || _lodash2['default'].get(childAttribute, 'model');\n    var childModel = sails.models[childModelName];\n\n    return childModel || parentModel;\n  },\n\n  /**\n   * http://swagger.io/specification/#definitionsObject\n   */\n  getDefinitionReference: function getDefinitionReference(sails, path) {\n    var model = Transformer.getModelFromPath(sails, path);\n    if (model) {\n      return '#/definitions/' + model.identity;\n    }\n  },\n\n  /**\n   * http://swagger.io/specification/#pathItemObject\n   */\n  getPathItem: function getPathItem(sails, pathGroup, pathkey) {\n    var methodGroups = _lodash2['default'].chain(pathGroup).indexBy('method').pick(['get', 'post', 'put', 'head', 'options', 'patch', 'delete']).value();\n\n    return _lodash2['default'].mapValues(methodGroups, function (methodGroup, method) {\n      return Transformer.getOperation(sails, methodGroup, method);\n    });\n  },\n\n  /**\n   * http://swagger.io/specification/#operationObject\n   */\n  getOperation: function getOperation(sails, methodGroup, method) {\n    return {\n      summary: methodMap[method],\n      consumes: ['application/json'],\n      produces: ['application/json'],\n      parameters: Transformer.getParameters(sails, methodGroup),\n      responses: Transformer.getResponses(sails, methodGroup),\n      tags: Transformer.getPathTags(sails, methodGroup)\n    };\n  },\n\n  /**\n   * A list of tags for API documentation control. Tags can be used for logical\n   * grouping of operations by resources or any other qualifier.\n   */\n  getPathTags: function getPathTags(sails, methodGroup) {\n    return _lodash2['default'].unique(_lodash2['default'].compact([Transformer.getPathModelTag(sails, methodGroup), Transformer.getPathControllerTag(sails, methodGroup), Transformer.getControllerFromRoute(sails, methodGroup)]));\n  },\n\n  getPathModelTag: function getPathModelTag(sails, methodGroup) {\n    var model = Transformer.getModelFromPath(sails, methodGroup.path);\n    return model && model.globalId;\n  },\n\n  getPathControllerTag: function getPathControllerTag(sails, methodGroup) {\n    var _methodGroup$path$split = methodGroup.path.split('/');\n\n    var _methodGroup$path$split2 = _slicedToArray(_methodGroup$path$split, 2);\n\n    var $ = _methodGroup$path$split2[0];\n    var pathToken = _methodGroup$path$split2[1];\n\n    return _lodash2['default'].get(sails.controllers, [pathToken, 'globalId']);\n  },\n\n  getControllerFromRoute: function getControllerFromRoute(sails, methodGroup) {\n    var route = sails.config.routes[methodGroup.method + ' ' + methodGroup.path];\n    if (!route) return;\n\n    var pattern = /(.+)Controller/;\n    var controller = route.controller || _lodash2['default'].isString(route) && route.split('.')[0];\n\n    if (!controller) return;\n\n    var _Controller$exec = /(.+)Controller/.exec(controller);\n\n    var _Controller$exec2 = _slicedToArray(_Controller$exec, 2);\n\n    var $ = _Controller$exec2[0];\n    var name = _Controller$exec2[1];\n\n    return name;\n  },\n\n  /**\n   * http://swagger.io/specification/#parameterObject\n   */\n  getParameters: function getParameters(sails, methodGroup) {\n    var routeParams = methodGroup.keys;\n\n    if (!routeParams.length) return;\n\n    return _lodash2['default'].map(routeParams, function (param) {\n      return {\n        name: param.name,\n        'in': 'path',\n        required: true,\n        type: 'string'\n      };\n    });\n  },\n\n  /**\n   * http://swagger.io/specification/#responsesObject\n   */\n  getResponses: function getResponses(sails, methodGroup) {\n    var $ref = Transformer.getDefinitionReference(sails, methodGroup.path);\n    var ok = {\n      description: 'The requested resource'\n    };\n    if ($ref) {\n      ok.schema = { '$ref': $ref };\n    }\n    return {\n      '200': ok,\n      '404': { description: 'Resource not found' },\n      '500': { description: 'Internal server error' }\n    };\n  }\n};\n\nexports['default'] = Transformer;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/dist/lib/spec.js":"/**\n * https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#dataTypeFormat\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar types = {\n  integer: {\n    type: 'integer',\n    format: 'int32'\n  },\n  float: {\n    type: 'number',\n    format: 'float'\n  },\n  double: {\n    type: 'number',\n    format: 'double'\n  },\n  string: {\n    type: 'string',\n    format: 'string'\n  },\n  binary: {\n    type: 'string',\n    format: 'binary'\n  },\n  boolean: {\n    type: 'boolean'\n  },\n  date: {\n    type: 'string',\n    format: 'date'\n  },\n  datetime: {\n    type: 'string',\n    format: 'date-time'\n  }\n};\n\nvar typeMap = {\n  text: 'string',\n  json: 'string'\n};\n\nvar Spec = {\n  getPropertyType: function getPropertyType(wltype) {\n    return types[typeMap[wltype] || wltype];\n  }\n};\n\nexports['default'] = Spec;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/config/marlinspike.js":"module.exports.marlinspike = {\n  models: false\n};\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/config/routes.js":"module.exports.routes = {\n  '/swagger/doc': {\n    cors: {\n      origin: 'http://swagger.balderdash.io',\n      methods: 'GET,OPTIONS,HEAD'\n    },\n    controller: 'SwaggerController',\n    action: 'doc'\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/gulpfile.js":"var gulp = require('gulp');\nvar babel = require('gulp-babel');\n\ngulp.task('default', function () {\n  gulp.src([ 'lib/**' ])\n    .pipe(babel())\n    .pipe(gulp.dest('dist/lib'));\n\n  gulp.src([ 'api/**' ])\n    .pipe(babel())\n    .pipe(gulp.dest('dist/api'));\n\n  gulp.src([ 'config/**' ])\n    .pipe(babel())\n    .pipe(gulp.dest('dist/config'));\n});\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/lib/spec.js":"/**\n * https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#dataTypeFormat\n */\n\nconst types = {\n  integer: {\n    type: 'integer',\n    format: 'int32'\n  },\n  float: {\n    type: 'number',\n    format: 'float'\n  },\n  double: {\n    type: 'number',\n    format: 'double'\n  },\n  string: {\n    type: 'string',\n    format: 'string'\n  },\n  binary: {\n    type: 'string',\n    format: 'binary'\n  },\n  boolean: {\n    type: 'boolean'\n  },\n  date: {\n    type: 'string',\n    format: 'date'\n  },\n  datetime: {\n    type: 'string',\n    format: 'date-time'\n  }\n}\n\nconst typeMap = {\n  text: 'string',\n  json: 'string'\n}\n\nconst Spec = {\n  getPropertyType (wltype) {\n    return types[typeMap[wltype] || wltype]\n  }\n}\n\nexport default Spec\n","/home/travis/build/npmtest/node-npmtest-sails-swagger/node_modules/sails-swagger/lib/xfmr.js":"import hoek from 'hoek'\nimport _ from 'lodash'\nimport Spec from './spec'\n\nconst methodMap = {\n  post: 'Create Object(s)',\n  get: 'Read Object(s)',\n  put: 'Update Object(s)',\n  patch: 'Update Object(s)',\n  delete: 'Destroy Object(s)',\n  options: 'Get Resource Options',\n  head: 'Get Resource headers'\n}\n\nconst Transformer = {\n\n  getSwagger (sails, pkg) {\n    return {\n      swagger: '2.0',\n      info: Transformer.getInfo(pkg),\n      host: sails.config.swagger.host,\n      tags: Transformer.getTags(sails),\n      definitions: Transformer.getDefinitions(sails),\n      paths: Transformer.getPaths(sails)\n    }\n  },\n\n  /**\n   * Convert a package.json file into a Swagger Info Object\n   * http://swagger.io/specification/#infoObject\n   */\n  getInfo (pkg) {\n    return hoek.transform(pkg, {\n      'title': 'name',\n      'description': 'description',\n      'version': 'version',\n\n      'contact.name': 'author',\n      'contact.url': 'homepage',\n\n      'license.name': 'license'\n    })\n  },\n\n  /**\n   * http://swagger.io/specification/#tagObject\n   */\n  getTags (sails) {\n    return _.map(_.pluck(sails.controllers, 'globalId'), tagName => {\n      return {\n        name: tagName\n        //description: `${tagName} Controller`\n      }\n    })\n  },\n\n  /**\n   * http://swagger.io/specification/#definitionsObject\n   */\n  getDefinitions (sails) {\n    let definitions = _.transform(sails.models, (definitions, model, modelName) => {\n      definitions[model.identity] = {\n        properties: Transformer.getDefinitionProperties(model.definition)\n      }\n    })\n\n    delete definitions['undefined']\n\n    return definitions\n  },\n\n  getDefinitionProperties (definition) {\n    return _.mapValues(definition, (def, attrName) => {\n      let property = _.pick(def, [\n        'type', 'description', 'format'\n      ])\n\n      return Spec.getPropertyType(property.type)\n    })\n  },\n\n  /**\n   * Convert the internal Sails route map into a Swagger Paths\n   * Object\n   * http://swagger.io/specification/#pathsObject\n   * http://swagger.io/specification/#pathItemObject\n   */\n  getPaths (sails) {\n    let routes = sails.router._privateRouter.routes\n    let pathGroups = _.chain(routes)\n      .values()\n      .flatten()\n      .unique(route => {\n        return route.path + route.method + JSON.stringify(route.keys)\n      })\n      .reject({ path: '/*' })\n      .reject({ path: '/__getcookie' })\n      .reject({ path: '/csrfToken' })\n      .reject({ path: '/csrftoken' })\n      .groupBy('path')\n      .mapKeys((_, path) => {\n        return path.replace(/:(\\w+)\\??/g, '{$1}')\n      })\n      .value()\n\n    return _.mapValues(pathGroups, (pathGroup, key) => {\n      return Transformer.getPathItem(sails, pathGroup, key)\n    })\n  },\n\n  getModelFromPath (sails, path) {\n    let split = path.split('/')\n    let [ $, parentModelName, parentId, childAttributeName, childId ] = path.split('/')\n    let parentModel = sails.models[parentModelName]\n    let childAttribute = _.get(parentModel, [ 'attributes', childAttributeName ])\n    let childModelName = _.get(childAttribute, 'collection') || _.get(childAttribute, 'model')\n    let childModel = sails.models[childModelName]\n\n    return childModel || parentModel\n  },\n\n  /**\n   * http://swagger.io/specification/#definitionsObject\n   */\n  getDefinitionReference (sails, path) {\n    let model = Transformer.getModelFromPath(sails, path)\n    if (model) {\n      return '#/definitions/' + model.identity\n    }\n  },\n\n  /**\n   * http://swagger.io/specification/#pathItemObject\n   */\n  getPathItem (sails, pathGroup, pathkey) {\n    let methodGroups = _.chain(pathGroup)\n      .indexBy('method')\n      .pick([\n        'get', 'post', 'put', 'head', 'options', 'patch', 'delete'\n      ])\n      .value()\n\n    return _.mapValues(methodGroups, (methodGroup, method) => {\n      return Transformer.getOperation(sails, methodGroup, method)\n    })\n  },\n\n  /**\n   * http://swagger.io/specification/#operationObject\n   */\n  getOperation (sails, methodGroup, method) {\n    return {\n      summary: methodMap[method],\n      consumes: [ 'application/json' ],\n      produces: [ 'application/json' ],\n      parameters: Transformer.getParameters(sails, methodGroup),\n      responses: Transformer.getResponses(sails, methodGroup),\n      tags: Transformer.getPathTags(sails, methodGroup)\n    }\n  },\n\n  /**\n   * A list of tags for API documentation control. Tags can be used for logical\n   * grouping of operations by resources or any other qualifier.\n   */\n  getPathTags (sails, methodGroup) {\n    return _.unique(_.compact([\n      Transformer.getPathModelTag(sails, methodGroup),\n      Transformer.getPathControllerTag(sails, methodGroup),\n      Transformer.getControllerFromRoute(sails, methodGroup)\n    ]))\n  },\n\n  getPathModelTag (sails, methodGroup) {\n    let model = Transformer.getModelFromPath(sails, methodGroup.path)\n    return model && model.globalId\n  },\n\n  getPathControllerTag (sails, methodGroup) {\n    let [ $, pathToken ] = methodGroup.path.split('/')\n    return _.get(sails.controllers, [ pathToken, 'globalId' ])\n  },\n\n  getControllerFromRoute (sails, methodGroup) {\n    let route = sails.config.routes[`${methodGroup.method} ${methodGroup.path}`]\n    if (!route) return\n\n    let pattern = /(.+)Controller/\n    let controller = route.controller || (_.isString(route) && route.split('.')[0])\n\n    if (!controller) return\n\n    let [ $, name ] = /(.+)Controller/.exec(controller)\n\n    return name\n  },\n\n  /**\n   * http://swagger.io/specification/#parameterObject\n   */\n  getParameters (sails, methodGroup) {\n    let routeParams = methodGroup.keys\n\n    if (!routeParams.length) return\n\n    return _.map(routeParams, param => {\n      return {\n        name: param.name,\n        in: 'path',\n        required: true,\n        type: 'string'\n      }\n    })\n  },\n\n  /**\n   * http://swagger.io/specification/#responsesObject\n   */\n  getResponses (sails, methodGroup) {\n    let $ref = Transformer.getDefinitionReference(sails, methodGroup.path)\n    let ok = {\n      description: 'The requested resource'\n    }\n    if ($ref) {\n      ok.schema = { '$ref': $ref }\n    }\n    return {\n      '200': ok,\n      '404': { description: 'Resource not found' },\n      '500': { description: 'Internal server error' }\n    }\n  }\n}\n\nexport default Transformer\n"}